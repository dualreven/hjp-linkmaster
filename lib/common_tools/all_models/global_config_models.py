# -*- coding: utf-8 -*-
"""
__project_ = 'hjp-bilink'
__file_name__ = 'global_config_mdoel.py'
__author__ = '十五'
__email__ = '564298339@qq.com'
__time__ = '2023/5/31 19:35'

全局配置的model, 从原本的config_model迁移过来.

"""

from .basic_models import *


@dataclass
class 类型_数据源_全局配置:
    配置字典: "dict" = field(default_factory=dict)

    def 获取值(self, 键名对象: "类型_属性项_全局配置"):
        if 键名对象.字段名 in self.配置字典:
            return self.配置字典[键名对象.字段名]
        else:
            return 键名对象.默认值


@dataclass
class 类型_属性项_全局配置(基类_属性项):
    @property
    def 值(self):
        if self.上级 and self.上级.数据源:
            if self.从上级读数据:
                存储的值 = self.上级.数据源.获取值(self)
                if self.有校验 and self.函数_赋值校验:
                    if self.函数_赋值校验(self, 存储的值):
                        return 存储的值
                    else:
                        print(f"{self.字段名},具有不正确的值,现已覆盖默认值")
                        self.设值(self.默认值)
                        return self.默认值
                return 存储的值
            elif self._读取函数:
                return self.读取函数(self)
            else:
                raise ValueError("未知的读取方式")
        else:
            return self.默认值

    def 设值(self, value):
        if self.上级 and self.上级.数据源:
            if self._保存值的函数:
                self.保存值的函数(self,value)
            elif self.保存到上级:
                self.上级.数据源.配置字典[self.字段名] = value
            else:
                raise NotImplementedError()
            if self._保存后执行:
                self.保存后执行(self)
        pass

    def __eq__(self, other):
        return self.值 == other

    上级: "类型_模型_全局配置" = None


@dataclass
class 类型_模型_全局配置(基类_模型):
    数据源: "None|类型_数据源_全局配置" = None

    # 视图管理器与视图
    视图管理器与视图_默认视图: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.视图管理器与视图.默认视图,
            展示名=译.视图管理器与视图_默认视图,
            说明=译.说明_视图管理器与视图_默认视图,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="",
            有校验=1,
            函数_赋值校验=lambda 项, 值: funcs.GviewOperation.exists(uuid=值),
            可展示=1,
            可展示中编辑=0,
            用户可访=1,
            组件类型=枚举.组件类型.editable_label,
            组件分页=译.视图管理器与视图,
            自定义组件=None,
            函数_传值到组件=None,
            # 有组件限制=1,
            # 组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=1,
    ))

    视图管理器与视图_默认的排版方式: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.视图管理器与视图.默认的排版方式,
            展示名=译.视图管理器与视图_默认的排版方式,
            说明 = 译.说明_视图管理器与视图_默认的排版方式,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.整数,
            默认值=0,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值 in [0, 1], # 校验针对的是储存到模型中的值, 限制针对的是组件中的一些显示范围限制

            可展示=1,
            可展示中编辑=1,
            用户可访=1,  # 可访问的,不一定可编辑, 可编辑的一定可访问.
            组件类型=枚举.组件类型.combo,  # 几种常规的和可自定义的
            组件分页=译.视图管理器与视图,  # tab的名称
            自定义组件=None,
            函数_传值到组件=None,  # 规定如何传值, 就是值的组件表示和值的存储表示的区别
            有组件限制=1,  # 取值范围限制
            组件限制=funcs.通用.类的属性_转_列表(枚举.全局配置.视图管理器与视图.排版方式),  # 限制函数
            属性项排序位置=0,  # 用于对属性项顺序有要求的环境.
    ))


    # 描述提取
    描述提取_长度限制:类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.描述提取.长度限制,
            展示名=译.描述提取_长度限制,
            说明 = 译.说明_描述提取_长度限制,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.整数,
            默认值=0,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值 >=0 and type(值)==int, # 校验针对的是储存到模型中的值, 限制针对的是组件中的一些显示范围限制

            可展示=1,
            可展示中编辑=1,
            用户可访=1,  # 可访问的,不一定可编辑, 可编辑的一定可访问.
            组件类型=枚举.组件类型.spin,  # 几种常规的和可自定义的
            组件分页=译.描述提取,  # tab的名称
            自定义组件=None,
            函数_传值到组件=None,  # 规定如何传值, 就是值的组件表示和值的存储表示的区别
            # 有组件限制=1,  # 取值范围限制
            # 组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],  # 限制函数
            # 属性项排序位置=0,  # 用于对属性项顺序有要求的环境.
    ))

    描述提取_同步描述:类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.描述提取.同步描述,
            展示名=译.描述提取_长度限制,
            说明 = 译.说明_描述提取_长度限制,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.布尔,
            默认值=False,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,  # 可访问的,不一定可编辑, 可编辑的一定可访问.
            组件类型=枚举.组件类型.radio,  # 几种常规的和可自定义的
            组件分页=译.描述提取,  # tab的名称
            自定义组件=None,
            函数_传值到组件=None,  # 规定如何传值, 就是值的组件表示和值的存储表示的区别
            # 有组件限制=1,  # 取值范围限制
            # 组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],  # 限制函数
            # 属性项排序位置=0,  # 用于对属性项顺序有要求的环境.
    ))

    描述提取_规则表: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.描述提取.规则表,
            展示名=译.描述提取_规则表,
            说明=译.说明_描述提取_规则表,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.表格,
            默认值=[枚举.全局配置.描述提取规则.默认规则()],
            有校验=1,
            函数_赋值校验=lambda 项, 值: type(值) == list and sum([1 for 规则 in 值 if not 枚举.全局配置.描述提取规则.规则校验(规则)])==0,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.customize,
            组件分页=译.描述提取,
            自定义组件=lambda 组件生成器 : 函数库_UI生成.自定义().widgets.属性项组件.表格_提取规则(组件生成器),
            函数_传值到组件=None,
            _保存值的函数=lambda 自身,值:funcs.全局配置操作.表格型属性项设值(自身,
                                                      safe.global_config_tableitem_model.类型_模型_描述提取规则(),
                                                      值),

    ))
    描述提取_新卡片默认同步描述: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.描述提取.新卡片默认同步描述,
            展示名=译.描述提取_新卡片默认同步描述,
            说明=译.说明_描述提取_新卡片默认同步描述,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.布尔,
            默认值=False,
            有校验=1,
            函数_赋值校验=lambda 项, 值:  type(值)==bool,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.radio,
            组件分页=译.描述提取,
            自定义组件=None,
            函数_传值到组件=None,
    ))
    描述提取_移除文内链接: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.描述提取.移除文内链接,
            展示名=译.描述提取_移除文内链接,
            说明=译.说明_描述提取_移除文内链接,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.布尔,
            默认值=False,
            有校验=1,
            函数_赋值校验=lambda 项, 值: type(值) == bool,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.radio,
            组件分页=译.描述提取,
            自定义组件=None,
            函数_传值到组件=None,
    ))

    # 全局双链

    全局双链_加标签: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.加标签,
            展示名=译.全局双链_加标签,
            说明=译.说明_全局双链_加标签,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.布尔,
            默认值=False,
            有校验=1,
            函数_赋值校验=lambda 项, 值: type(值) == bool,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.radio,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            # 有组件限制=1,
            # 组件限制=
            属性项排序位置=0,
    ))
    全局双链_默认双链模式: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.默认双链模式,
            展示名=译.全局双链_默认双链模式,
            说明=译.说明_全局双链_默认双链模式,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.枚举,
            默认值=0,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值 in [0, 1],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.combo,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=funcs.通用.类的属性_转_列表(枚举.全局配置.全局双链.双链模式),
            属性项排序位置=0,
    ))
    全局双链_默认解绑模式: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.默认解绑模式,
            展示名=译.全局双链_默认解绑模式,
            说明=译.说明_全局双链_默认解绑模式,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.枚举,
            默认值=0,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值 in [0, 1],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.combo,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=funcs.通用.类的属性_转_列表(枚举.全局配置.全局双链.解绑模式),
            属性项排序位置=0,
    ))
    全局双链_默认插入模式: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.默认插入模式,
            展示名=译.全局双链_默认插入模式,
            说明=译.说明_全局双链_默认插入模式,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.枚举,
            默认值=0,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值 in [0, 1, 2],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.combo,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=funcs.通用.类的属性_转_列表(枚举.全局配置.全局双链.插入模式),
            属性项排序位置=0,
    ))
    全局双链_默认复制模式: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.默认复制模式,
            展示名=译.全局双链_默认复制模式,
            说明=译.说明_全局双链_默认复制模式,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.枚举,
            默认值=0,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值 in [0,1,2,3,4],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.combo,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=funcs.通用.类的属性_转_列表(枚举.全局配置.全局双链.复制模式),
            属性项排序位置=0,
    ))
    全局双链_链接后打开浏览器: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.链接后打开浏览器,
            展示名=译.全局双链_链接后打开浏览器,
            # 说明=译.说明_全局双链_链接后打开浏览器,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.布尔,
            默认值=True,
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 in [0, 1],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.radio,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            # 有组件限制=1,
            # 组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    全局双链_链接快捷键: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.链接快捷键,
            展示名=译.全局双链_链接快捷键,
            # 说明=译.说明_全局双链_链接快捷键,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="ctrl+alt+1",
            有校验=1,
            函数_赋值校验=lambda 项, 值: not QKeySequence(值).isEmpty(),
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.line,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            # 组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    全局双链_解绑快捷键: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.解绑快捷键,
            展示名=译.全局双链_解绑快捷键,
            # 说明=译.说明_全局双链_加标签,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="ctrl+alt+2",
            有校验=1,
            函数_赋值校验=lambda 项, 值: not QKeySequence(值).isEmpty(),
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.line,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    全局双链_收集快捷键: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.收集快捷键,
            展示名=译.全局双链_收集快捷键,
            # 说明=译.说明_全局双链_加标签,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="ctrl+alt+3",
            有校验=1,
            函数_赋值校验=lambda 项, 值: not QKeySequence(值).isEmpty(),
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.line,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    全局双链_复制链接快捷键: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.复制链接快捷键,
            展示名=译.全局双链_复制链接快捷键,
            # 说明=译.说明_全局双链_加标签,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="ctrl+alt+4",
            有校验=1,
            函数_赋值校验=lambda 项, 值: not QKeySequence(值).isEmpty(),
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.line,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    全局双链_收集器快捷键: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.全局双链.收集器快捷键,
            展示名=译.全局双链_收集器快捷键,
            # 说明=译.说明_全局双链_加标签,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="ctrl+alt+5",
            有校验=1,
            函数_赋值校验=lambda 项, 值: not QKeySequence(值).isEmpty(),
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.line,
            组件分页=译.全局双链,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))

    # 卡片元信息

    卡片元信息_链接菜单样式文本: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.卡片元信息.链接菜单样式文本,
            展示名=译.卡片元信息_链接菜单样式文本,
            说明=译.说明_卡片元信息_链接菜单样式文本,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="",
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 >= 0 and type(值) == int,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.text,
            组件分页=译.卡片元信息,
            自定义组件=None,
            函数_传值到组件=None,
    ))

    卡片元信息_链接菜单样式文件: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.卡片元信息.链接菜单样式文件,
            展示名=译.卡片元信息_链接菜单样式文件,
            说明=译.说明_卡片元信息_链接菜单样式文件,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文件,
            默认值="",
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: os.path.isfile(值),
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.line,
            组件分页=译.卡片元信息,
            自定义组件=None,
            函数_传值到组件=None,
    ))
    卡片元信息_链接菜单样式预设: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.卡片元信息.链接菜单样式预设,
            展示名=译.卡片元信息_链接菜单样式预设,
            说明=译.说明_卡片元信息_链接菜单样式预设,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.整数,
            默认值=0,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值 in[0,1],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.combo,
            有组件限制=1,
            组件限制=funcs.通用.类的属性_转_列表(枚举.全局配置.卡片元信息.链接菜单样式预设模式()),
            组件分页=译.卡片元信息,
            自定义组件=None,
            函数_传值到组件=None,
    ))

    # 备份

    备份_开启自动备份: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.备份.开启自动备份,
            展示名=译.备份_开启自动备份,
            说明=译.说明_备份_开启自动备份,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.布尔,
            默认值=True,
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 in [0, 1],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.radio,
            组件分页=译.备份,
            自定义组件=None,
            函数_传值到组件=None,
            # 有组件限制=1,
            # 组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    备份_自动备份间隔: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.备份.自动备份间隔,
            展示名=译.备份_自动备份间隔,
            说明=译.说明_备份_自动备份间隔,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.数值,
            默认值=24,
            有校验=1,
            函数_赋值校验=lambda 项, 值: 值>=0 and type(值)in [int,float],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.spin,
            组件分页=译.备份,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=[0,最大正整数],
            属性项排序位置=0,
    ))
    备份_自动备份路径: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.备份.自动备份路径,
            展示名=译.备份_自动备份路径,
            说明=译.说明_备份_自动备份路径,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.路径,
            默认值="",
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 in [0, 1],
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.combo,
            组件分页=译.备份,
            自定义组件=None,
            函数_传值到组件=None,
            有组件限制=1,
            组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    备份_上次备份时间: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.备份.上次备份时间,
            展示名=译.备份_上次备份时间,
            说明=译.说明_备份_上次备份时间,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.时间戳,
            默认值=0,
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 in [0, 1],
            可展示=1,
            可展示中编辑=0,
            用户可访=1,
            组件类型=枚举.组件类型.label,
            组件分页=译.备份,
            自定义组件=None,
            函数_传值到组件=lambda 项:funcs.Utils.时间戳转日期(项.值).strftime(
                "%Y%m%d%H%M%S"),
            # 有组件限制=1,
            # 组件限制=[id_name(ID=0, name="list"), id_name(ID=1, name="tree")],
            属性项排序位置=0,
    ))
    #PDF链接
    PDF链接_样式: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.PDF链接.样式,
            展示名=译.PDF链接_样式,
            说明=译.说明_PDF链接_样式,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="",
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 >= 0 and type(值) == int,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.text,
            组件分页=译.PDF链接,
            自定义组件=None,
            函数_传值到组件=None,
    ))
    PDF链接_命令: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.PDF链接.命令,
            展示名=译.PDF链接_命令,
            说明=译.说明_PDF链接_命令,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值=工具.默认指令_用于pdf读取(),
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 >= 0 and type(值) == int,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.line,
            组件分页=译.PDF链接,
            自定义组件=None,
            函数_传值到组件=None,
    ))
    PDF链接_页码显示开启: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.PDF链接.页码显示开启,
            展示名=译.PDF链接_页码显示开启,
            说明=译.说明_PDF链接_页码显示开启,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.布尔,
            默认值=True,
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 >= 0 and type(值) == int,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.radio,
            组件分页=译.PDF链接,
            自定义组件=None,
            函数_传值到组件=None,
    ))
    PDF链接_页码显示样式: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.PDF链接.页码显示样式,
            展示名=译.PDF链接_页码显示样式,
            说明=译.说明_PDF链接_页码显示样式,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.文本,
            默认值="",
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 >= 0 and type(值) == int,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.text,
            组件分页=译.PDF链接,
            自定义组件=None,
            函数_传值到组件=None,
    ))
    PDF链接_预设pdf: 类型_属性项_全局配置 = field(default_factory=lambda: 类型_属性项_全局配置(
            字段名=枚举.全局配置.PDF链接.预设pdf,
            展示名=译.PDF链接_预设pdf,
            说明=译.说明_PDF链接_预设pdf,
            从上级读数据=1,
            保存到上级=1,
            值类型=枚举.值类型.表格,
            默认值=[],
            # 有校验=1,
            # 函数_赋值校验=lambda 项, 值: 值 >= 0 and type(值) == int,
            可展示=1,
            可展示中编辑=1,
            用户可访=1,
            组件类型=枚举.组件类型.customize,
            组件分页=译.PDF链接,
            自定义组件=None,
            函数_传值到组件=None,
    ))

    def __post_init__(self):
        super().__post_init__()
        if not self.数据源:
            字典 = {}
            for 字段名, 属性项 in self.属性字典.items():
                字典[字段名] = 属性项.值
            self.数据源 = 类型_数据源_全局配置(字典)

    pass


class 工具:
    @staticmethod
    def 默认指令_用于pdf读取():
        url = f"""   file:///{{{枚举.全局配置.PDF链接.PDFLink.path}}}#page={{{枚举.全局配置.PDF链接.PDFLink.page}}} """
        if isMac:
            return f'''open -a Safari "{url}" '''
        if isWin:
            return f""" start msedge "{url}" """
        return ""

