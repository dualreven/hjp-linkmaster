# -*- coding: utf-8 -*-
"""
__project_ = 'hjp-bilink'
__file_name__ = 'view_node_models.py'
__author__ = '十五'
__email__ = '564298339@qq.com'
__time__ = '2023/2/27 5:44'
"""

from .basic_models import *


@dataclass
class 类型_视图结点数据源:
    模型: "类型_视图结点集模型" = None
    结点编号: "类型_结点编号" = None

@dataclass
class 类型_视图结点属性项(基类_属性项):
    """描述了每一项的特点"""
    上级: "类型_视图结点模型" = None

    @property
    def 值(self):

        if self.上级 and self.上级.数据源:
            编号 = self.上级.数据源.结点编号
            模型 = self.上级.数据源.模型
            if self.从上级读数据:
                return 模型.data[编号][self.字段名]
            elif self._读取函数:
                return self.读取函数(self)
            else:
                raise ValueError("未知的读取方式")
        else:
            return self.默认值

    def 设值(self, value):
        if self.上级 and self.上级.数据源:
            编号 = self.上级.数据源.结点编号
            模型 = self.上级.数据源.模型
            if self.保存到上级:
                模型.data[编号][self.字段名] = value
            elif self._保存值的函数:
                self.保存值的函数(self, value)
            else:
                raise ValueError("未知的保存方式,或者不该保存")
            if self.上级.UI创建完成:
                模型.上级.数据更新.结点编辑发生(编号)
            if self._保存后执行:
                self.保存后执行(self)
            if 模型.上级:
                funcs.GviewOperation.save(模型.上级)

    def __eq__(self, other):
        return self.值 == other


# noinspection PyArgumentList
@dataclass
class 类型_视图结点模型(基类_模型):
    """
    这是针对一个结点而言的,比gviewdata的层级更低
    提供:
        将非推算项保存到视图结点数据库的方法 -> 保存结点信息()
        将可展示与可展示中编辑项以UI形式呈现 -> 创建结点信息UI()
        将用户可访的变量提供给对应的接口. -> 可访变量, 可访字面量
    """

    # def __init__(self,视图数据:"funcs.GViewData",视图结点编号:"str"):
    #     self.数据源 = self.数据源类(视图数据,视图结点编号)

    数据源: "None|类型_视图结点数据源" = None

    位置: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.位置,
            展示名=译.结点位置,
            从上级读数据=1,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件,
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断
            用户可访=0,  # 指的是用户自定义python语句是否可访问
            组件类型=枚举.组件类型.label,
            默认值=[],
            值类型=枚举.值类型.列表,
            值解释="[0,0] or [1.1,0.5]",

    ))

    出度: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.出度,
            展示名=译.结点出度,
            说明=译.从结点出发的边的数量,
            从上级读数据=0,
            保存到上级=0,
            可展示=1,  # 需要对应的展示组件,
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断
            用户可访=1,
            _读取函数=lambda 项: funcs.GviewOperation.获取结点出度(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号),
            组件类型=枚举.组件类型.label,
            默认值=0,
            值类型=枚举.值类型.数值,
            值解释="0 or 15",
    ))

    入度: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.入度,
            展示名=译.结点入度,
            说明=译.从结点出发的边的数量,
            从上级读数据=0,
            保存到上级=0,
            可展示=1,  # 需要对应的展示组件,
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,
            _读取函数=lambda 项: funcs.GviewOperation.获取结点入度(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号),
            组件类型=枚举.组件类型.label,
            默认值=0,
            值类型=枚举.值类型.数值,
            值解释="0 or 15",
    ))

    访问次数: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.访问次数,
            展示名=译.访问数,
            说明=译.说明_访问数,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            默认值=0,
            组件类型=枚举.组件类型.label,  # 展示用的组件
            值类型=枚举.值类型.数值,
            值解释="0 or 15",
    ))

    已到期: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.已到期,
            展示名=译.到期卡片,
            说明=译.说明_到期结点,
            从上级读数据=0,
            保存到上级=0,

            可展示=1,  # 需要对应的展示组件,
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            _读取函数=lambda 项: funcs.GviewOperation.判断结点已到期(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号),
            组件类型=枚举.组件类型.label,  # 展示用的组件
            默认值=False,
            值类型=枚举.值类型.布尔,
            值解释="True or False",
            # 组件传值方式=None,
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            # 自定义组件=None,
    ))

    全局上次复习: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.全局上次复习,
            展示名=译.全局上次复习,
            说明=译.说明_全局上次复习,
            从上级读数据=0,
            保存到上级=0,
            可展示=1,  # 需要对应的展示组件,
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断
            用户可访=1,
            _读取函数=lambda 项: int(time.mktime(funcs.GviewOperation.结点上次复习时间(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号).timetuple())),
            组件类型=枚举.组件类型.time,  # 展示用的组件
            默认值=0,
            值类型=枚举.值类型.时间戳,
            值解释="1676747497 or 1676661096",
    ))

    上次复习: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.上次复习,
            展示名=译.结点上次复习,
            说明=译.说明_结点上次复习,
            从上级读数据=1,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件,
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断
            用户可访=1,
            _读取函数=None,
            组件类型=枚举.组件类型.time,  # 展示用的组件
            默认值=0,
            值类型=枚举.值类型.时间戳,
            值解释="1676747497 or 1676661096",
    ))

    上次编辑: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.上次编辑,
            展示名=译.上次编辑时间,
            说明=译.说明_上次编辑,
            从上级读数据=1,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=None,
            组件类型=枚举.组件类型.time,  # 展示用的组件
            # 组件传值方式=lambda 值: funcs.Utils.时间戳转日期(值).__str__(),
            # 保存值的函数=None,
            有限制=0,
            限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            默认值=int(time.time()),
            值类型=枚举.值类型.时间戳,
            值解释="1676747497 or 1676661096",
    ))
    上次访问: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.上次访问,
            展示名=译.上次访问,
            说明=译.说明_上次访问,
            保存到上级=1,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=None,
            组件类型=枚举.组件类型.time,  # 展示用的组件
            # 组件传值方式=lambda 项: funcs.Utils.时间戳转日期(项.值).__str__(),
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            默认值=int(time.time()),
            值类型=枚举.值类型.时间戳,
            值解释="1676747497 or 1676661096",
    ))
    创建时间: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.创建时间,
            展示名=译.创建时间,
            说明=译.说明_创建时间,
            保存到上级=1,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=None,
            组件类型=枚举.组件类型.time,  # 展示用的组件
            # 组件传值方式=lambda 项: funcs.Utils.时间戳转日期(项.值).__str__(),
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            默认值=int(time.time()),
            值类型=枚举.值类型.时间戳,
            值解释="1676747497 or 1676661096",
    ))
    数据类型: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.数据类型,
            展示名=译.结点数据类型,
            说明=译.说明_结点数据类型,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            _读取函数=None,
            组件类型=枚举.组件类型.label,  # 展示用的组件
            # 组件传值方式=None,
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            默认值="card",
            值类型=枚举.值类型.枚举_结点类型,
            值解释="'card' or 'view'",
    ))
    # 可修改: 数值/bool/文本
    优先级: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.优先级,
            展示名=译.结点优先级,
            说明=译.说明_结点优先级,
            保存到上级=1,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=1,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=None,
            组件类型=枚举.组件类型.slider,  # 展示用的组件
            # 组件传值方式=None,
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            有限制=1,
            限制=[-100, 100],
            默认值=0,
            值类型=枚举.值类型.数值,
            值解释="-100 or 100",
            # 自定义组件=lambda 项:widgets.自定义组件.优先级(项),
            可批量编辑=1
    ))

    描述: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.描述,
            展示名=译.结点描述,
            说明=译.说明_结点描述,
            从上级读数据=1,
            保存到上级=0,
            可展示=1,  # 需要对应的展示组件,
            可展示中编辑=1,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=lambda 项: funcs.GviewOperation.获取视图结点描述(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号),
            组件类型=枚举.组件类型.editable_label,  # 展示用的组件
            _保存值的函数=lambda 项, 新值: funcs.GviewOperation.设定视图结点描述(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号, 新值),
            # _保存后执行=lambda 项: funcs.GviewOperation.设定视图结点描述(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号, 项.值),
            默认值="",
            值类型=枚举.值类型.文本,
            值解释="'abc' or 'hello'"
            # 组件传值方式=None,
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            # 自定义组件=None,
    ))

    角色: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.角色,
            展示名=译.结点角色,
            说明=译.说明_结点角色,
            从上级读数据=1,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=1,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=None,
            组件类型=枚举.组件类型.customize,  # 展示用的组件
            自定义组件=lambda 组件生成器:函数库_UI生成.自定义().属性项组件.角色多选(组件生成器),
            默认值=[],
            值类型=枚举.值类型.列表,
            值解释="[1,3,4] or [3,4,5] , if no role then []",
            可批量编辑=1,
    ))

    角色名: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.角色名,
            展示名=译.结点角色名,
            说明=译.说明_结点角色名,
            从上级读数据=0,
            保存到上级=0,
            # 从上级读数据的意思是从上级读数据到视图数据中,
            可展示=0,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            _读取函数=lambda 项: funcs.GviewConfigOperation.获取结点角色名(项.上级.数据源.模型.上级, 项.上级.数据源.结点编号),
            组件类型=枚举.组件类型.label,  # 展示用的组件
            值解释="['apple','banana'] or ['banana'] if no role then [] ",
            默认值="",
            值类型=枚举.值类型.列表
    ))

    主要结点: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.主要结点,
            展示名=译.主要结点,
            说明=译.说明_主要结点,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=1,  # 需要对应的可展示中编辑组件, 与可展示联合判断

            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            默认值=False,
            组件类型=枚举.组件类型.checkbox,  # 展示用的组件
            值类型=枚举.值类型.布尔,
            值解释="True or False",
            可批量编辑=1,
            # 组件传值方式=None,
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            # 自定义组件=None,
    ))

    需要复习: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.需要复习,
            展示名=译.需要复习,
            说明=译.说明_需要复习,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=1,  # 需要对应的可展示中编辑组件, 与可展示联合判断
            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            可批量编辑=1,
            # 读取函数=None,
            组件类型=枚举.组件类型.checkbox,  # 展示用的组件
            # 组件传值方式=None,
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            # 自定义组件=None,
            默认值=True,
            值类型=枚举.值类型.布尔,
            值解释="True or False",
    ))

    必须复习: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.必须复习,
            展示名=译.必须复习,
            说明=译.说明_必须复习,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            保存到上级=1,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=1,  # 需要对应的可展示中编辑组件, 与可展示联合判断
            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=None,
            组件类型=枚举.组件类型.checkbox,  # 展示用的组件
            # 组件传值方式=None,
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            # 自定义组件=None,
            默认值=False,
            值类型=枚举.值类型.布尔,
            值解释="True or False",
            可批量编辑=1,
    ))

    漫游起点: 类型_视图结点属性项 = field(default_factory=lambda: 类型_视图结点属性项(
            字段名=枚举.结点.漫游起点,
            展示名=译.漫游起点,
            说明=译.说明_漫游起点,
            从上级读数据=1,  # 从上级读数据的意思是从上级读数据到视图数据中,
            可展示=1,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
            可展示中编辑=1,  # 需要对应的可展示中编辑组件, 与可展示联合判断
            保存到上级=1,
            用户可访=1,  # 用户可以用自定义的python语句访问到这个变量的值
            # 读取函数=None,
            组件类型=枚举.组件类型.checkbox,  # 展示用的组件
            # 组件传值方式=None,
            # 保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
            # 有限制=0,
            # 限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
            # 自定义组件=None,
            默认值=False,
            值类型=枚举.值类型.布尔,
            值解释="True or False",
            可批量编辑=1,
    ))

    # 样板:类型_视图结点属性项 = field(default_factory=lambda :类型_视图结点属性项(
    #     字段名 = 枚举.结点.位置,
    #     展示名 = 译.结点位置,
    #     说明=译,
    #     从上级读数据=0, # 从上级读数据的意思是从上级读数据到视图数据中,
    #     可展示=0,  # 需要对应的展示组件, 这里的展示是指展示在卡片详情中
    #     可展示中编辑=0,  # 需要对应的可展示中编辑组件, 与可展示联合判断
    #     推算得到=0,
    #     用户可访=0, # 用户可以用自定义的python语句访问到这个变量的值
    #     读取函数=None,
    #     组件类型=枚举.组件类型, #展示用的组件
    #     组件传值方式=None,
    #     保存值的函数=None, # 当不能直接保存到视图中时, 采用这个函数保存
    #     有限制=0,
    #     限制=field(default_factory=lambda: [0, funcs.G.src_admin.MAXINT]),
    #     自定义组件=None,
    # ))

# @dataclass
class 类型_视图结点集模型(基类_集模型):
    """
    本来, 这个对象用于gviewdata.node_helper 属性, 但是难以做到和gviewdata.nodes同步更新, 因此我们融合两者

    """

    def __init__(self, 上级: "Optional[类型_视图数据]", data: "dict"):
        self.上级: Optional[类型_视图数据] = 上级
        self.data: "dict" = data # nodes字典

    def __getitem__(self, node_id):
        return 类型_视图结点模型(数据源=类型_视图结点数据源(模型=self, 结点编号=node_id))

